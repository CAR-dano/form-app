name: Flutter Build and Release on Main Branch Update

on:
  push:
    branches: [ main ]

jobs:
  build_and_release_on_main:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # Required to create releases and tags
      pull-requests: read # Required by actions/github-script to read PR details

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags for versioning

      # Step 2: Set up Flutter environment
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3' # Specify your project's Flutter version
          channel: 'stable'         # Specify Flutter channel

      # Step 3: Prepare for CI checks (dummy environment for local tests)
      - name: Create dummy .env file for analysis and testing
        run: |
          echo "API_BASE_URL=http://dummy.api.for.ci" > .env

      # Step 4: Install Flutter dependencies
      - name: Install dependencies
        run: flutter pub get

      # Step 5: Run static analysis
      - name: Analyze project
        run: flutter analyze

      # Step 6: Run tests
      - name: Run tests
        run: flutter test

      # Step 7: Extract version from pubspec.yaml
      - name: Read pubspec.yaml semantic version
        id: pubspec
        run: |
          VERSION_LINE=$(grep '^version:' pubspec.yaml)
          SEMANTIC_VERSION=$(echo "$VERSION_LINE" | sed 's/version: //g' | sed 's/+\.*//g' | tr -d '[:space:]')
          echo "semantic_version=$SEMANTIC_VERSION" >> $GITHUB_OUTPUT
          echo "Extracted semantic version: $SEMANTIC_VERSION"

      # Step 8: Create actual .env file for the release build using secrets
      - name: Create .env file for Release Build
        run: |
          echo "API_BASE_URL=${{ secrets.API_BASE_URL }}" > .env
        env:
          API_BASE_URL: ${{ secrets.API_BASE_URL }}

      # Step 9: Build ABI-Specific Release APKs
      - name: Build ABI-Specific Release APKs
        run: flutter build apk --split-per-abi --release --build-name=${{ steps.pubspec.outputs.semantic_version }} --build-number=${{ github.run_number }}
        # This will create APKs like:
        # build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
        # build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
        # build/app/outputs/flutter-apk/app-x86_64-release.apk (if supported/built)

      # Step 10: Build Debug APK (remains a single universal APK)
      - name: Build Debug APK
        run: flutter build apk --debug

      # Step 11: Rename Debug APK to include versioning for release assets
      - name: Rename Debug APK for Release
        id: debug_apk_details
        run: |
          original_debug_apk_path="build/app/outputs/flutter-apk/app-debug.apk"
          new_debug_apk_name="app-debug-v${{ steps.pubspec.outputs.semantic_version }}+${{ github.run_number }}.apk"
          new_debug_apk_path="build/app/outputs/flutter-apk/${new_debug_apk_name}"
          mv "$original_debug_apk_path" "$new_debug_apk_path"
          echo "path=$new_debug_apk_path" >> $GITHUB_OUTPUT
          echo "name=$new_debug_apk_name" >> $GITHUB_OUTPUT
          echo "Debug APK renamed to: $new_debug_apk_name and moved to $new_debug_apk_path"

      # Step 12: Generate a unique tag name for the release
      - name: Create Release Tag Name
        id: create_tag
        run: |
          TAG_NAME="v${{ steps.pubspec.outputs.semantic_version }}+${{ github.run_number }}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Generated tag name: $TAG_NAME"

      # Step 13: Prepare the body/notes for the GitHub Release
      - name: Prepare Release Body
        id: prep_release_body
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {
              COMMIT_SHA, ACTOR, SEMANTIC_VERSION, RUN_NUMBER, REPO_URL, HEAD_COMMIT_MESSAGE
            } = process.env;

            let main_release_content = "";
            let pr_details_for_footer = "";

            const pr_regex_merge = /Merge pull request #(\d+)/;
            const pr_regex_squash_title = /\(#(\d+)\)(?:$|\n)/;
            let match = HEAD_COMMIT_MESSAGE.match(pr_regex_merge);
            if (!match) {
              const first_line_of_commit = HEAD_COMMIT_MESSAGE.split('\n')[0];
              match = first_line_of_commit.match(pr_regex_squash_title);
            }

            if (match && match[1]) {
              const pr_number = match[1];
              core.info(`Attempting to fetch details for PR #${pr_number}`);
              try {
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr_number,
                });
                main_release_content = pr.body || "No description provided for this Pull Request.";
                pr_details_for_footer += `**Pull Request:** [#${pr_number}: ${pr.title}](${pr.html_url})\n`;
                pr_details_for_footer += `**PR Author:** @${pr.user.login}\n`;
              } catch (error) {
                core.warning(`Could not fetch details for PR #${pr_number}: ${error.message}`);
                main_release_content = `Could not automatically fetch Pull Request description for PR #${pr_number}. Please refer to the PR or commit message directly.\n\n`;
                main_release_content += `Associated PR: [#${pr_number}](${REPO_URL}/pull/${pr_number})\n`;
              }
            } else {
              core.info("Could not determine PR from commit message. Using commit message as main content.");
              const commit_title = HEAD_COMMIT_MESSAGE.split('\n')[0];
              let commit_body_part = HEAD_COMMIT_MESSAGE.substring(commit_title.length).trim();
              if (commit_body_part) {
                main_release_content = `**${commit_title}**\n\n${commit_body_part}`;
              } else {
                main_release_content = HEAD_COMMIT_MESSAGE;
              }
            }

            let footer_info = "\n\n---\n\n";
            footer_info += `**Version:** v${SEMANTIC_VERSION}+${RUN_NUMBER}\n`;
            footer_info += `**Released by:** @${ACTOR}\n`;
            footer_info += pr_details_for_footer;
            footer_info += `**Commit:** [${COMMIT_SHA.substring(0,7)}](${REPO_URL}/commit/${COMMIT_SHA})\n`;
            footer_info += `\n**Full Commit Message:**\n\`\`\`\n${HEAD_COMMIT_MESSAGE}\n\`\`\`\n`;

            const release_body = main_release_content + footer_info;
            core.setOutput("body", release_body);
        env:
          SEMANTIC_VERSION: ${{ steps.pubspec.outputs.semantic_version }}
          RUN_NUMBER: ${{ github.run_number }}
          COMMIT_SHA: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          REPO_URL: ${{ github.server_url }}/${{ github.repository }}
          HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}

      # Step 14: Create the GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.tag_name }}
          release_name: "Release v${{ steps.pubspec.outputs.semantic_version }}+${{ github.run_number }}"
          body: ${{ steps.prep_release_body.outputs.body }}
          draft: false
          prerelease: false

      # Step 15: Upload ABI-specific Release APK Assets
      - name: Upload arm64-v8a Release APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
          asset_name: app-arm64-v8a-release-v${{ steps.pubspec.outputs.semantic_version }}+${{ github.run_number }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload armeabi-v7a Release APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          asset_name: app-armeabi-v7a-release-v${{ steps.pubspec.outputs.semantic_version }}+${{ github.run_number }}.apk
          asset_content_type: application/vnd.android.package-archive

      # Step 16: Upload the Debug APK as a release asset
      - name: Upload Debug APK Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.debug_apk_details.outputs.path }}
          asset_name: ${{ steps.debug_apk_details.outputs.name }}
          asset_content_type: application/vnd.android.package-archive

      # Step 17: Upload All Release APKs as a Build Artifact (for archival)
      - name: Upload All Release APKs as Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apks-v${{ steps.pubspec.outputs.semantic_version }}+${{ github.run_number }}
          path: build/app/outputs/flutter-apk/*-release.apk # Upload all release APKs

      # Step 18: Upload Debug APK as a build artifact
      - name: Upload Debug Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-v${{ steps.pubspec.outputs.semantic_version }}+${{ github.run_number }}
          path: ${{ steps.debug_apk_details.outputs.path }}